#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""This is a management program for svn or git version-controlled projects."""
import os
import shutil
import sys
import subprocess
import yaml
import argparse


HOME = os.path.expanduser("~")
CONFIG_PATH = os.path.join(HOME, ".config", "vcm")
VCM_PROJECTS = os.path.join(CONFIG_PATH, "projects.yaml")
VCM_CONFIG = os.path.join(CONFIG_PATH, "config.yaml")
DEFAULTS = {'vcs_dot_path': '{}/.vcs_dots'.format(HOME),
            'vcs_path': '{}/.version_controlled_software'.format(HOME),
            'move': False,
            'move_dot': False}

# parser set-up
parser = argparse.ArgumentParser(description=__doc__)

# parser.add_argument('action',
#                     metavar='vcm action',
#                     type=str, default="innit",
#                     help='Action you want performed [init|move]')

parser.add_argument('-m', "--move",
                    action="store_true",
                    default='',
                    dest="move",
                    help=('Moves the Folder to a predefined VCS_PATH '
                          + '(defined in {}'.format(VCM_CONFIG)
                          + ') and creates a symlink '
                          + 'in its stead.'))

parser.add_argument('-md', "--move-dot",
                    action="store_true",
                    default='',
                    dest="move_dot",
                    help='Moves the dotFolder (.svn or .git to {} and creates '
                         'a symlink in its stead.')

parser.add_argument('-d', "--delete",
                    action="store_true",
                    default=False,
                    dest="delete",
                    help=('Removes the project data from the internal '
                          'database [Default: False].'))

parser.add_argument('-c', "--check",
                    action="store_true",
                    default=False,
                    dest="check",
                    help=('Checks the status of the repository and compares it '
                          'to the remote origin.'))

parser.add_argument('-g', "--git-repo",
                    action='store',
                    type=str, default="",
                    dest="gitrepo",
                    help='Is it online? (provide address, e.g. '
                         'server.gitlab.org or github.com)')

parser.add_argument('-p', "--project",
                    action='store',
                    type=str, default="",
                    dest="project_name",
                    help='Custom project name [default: root folder name]')

parser.add_argument('-vc', "--version-control",
                    action='store',
                    type=str, default="git",
                    dest='vc_system',
                    help='Version Control system [default: git]')

parser.add_argument('-pa', "--path",
                    action='store',
                    type=str, default="",
                    dest='path',
                    help='Directory path [default: current directory]')

parser.add_argument('-sa', "--server-address",
                    action='store',
                    type=str, default="",
                    dest="server_address",
                    help='Git or Svn server address')

parser.add_argument('-u', "--user-name",
                    action='store',
                    type=str, default="",
                    dest="user_name",
                    help='User name for the git or svn server')

parser.add_argument('-i', "--identifier",
                    action='store',
                    type=str, default="",
                    dest="identifier",
                    help='Internal database identifier, e.g. projectname-git')

parser.add_argument('-a', "--alt-paths", nargs='+',
                    action='store',
                    type=str, default="",
                    dest="alt_paths",
                    help='Add alternative path roots where symlinks should '
                         'appear.')

args = parser.parse_args()


def query_process(command):
    """Retrieve an output of a Unix command."""
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    if err:
        sys.exit(err)
    return out


def read_config(config_file=None):
    """Read the already existing VCM_CONFIG yaml file."""

    if not config_file:
        config_file = VCM_CONFIG
    if not os.path.exists(VCM_CONFIG):
        write_config(VCM_CONFIG, DEFAULTS)
    # Slurping in the yaml
    with open(config_file) as config_yaml:
        config_data = yaml.load(config_yaml)
    return config_data

def write_config(config_file, config_data):
    """Write a VCM_CONFIG yaml file."""
    if not os.path.exists(os.path.dirname(config_file)):
        os.makedirs(os.path.dirname(config_file))
    with open(config_file, 'w') as config_yaml:
        config_yaml.write(yaml.dump(config_data,
                          default_flow_style=False))


class VC_Project(object):
    """Contains details and methods for a version-controlled project."""

    def __init__(self, **kwargs):
        """Initiate the project only with kewords."""
        super(VC_Project, self).__init__()
        if (len(kwargs) == 1 and 'identifier' in kwargs):
            kwargs_new = self.project_from_data(kwargs['identifier'])
            # This is python 3.5 style
            if (sys.version_info.major == 3 and sys.version_info.minor >= 5):
                self.set_defaults({**kwargs, **kwargs_new})
            else:
                sys.exit("Needs Python3.5 or newer.")
        else:
            self.set_defaults(kwargs)

    def set_defaults(self, kwargs):
        """Set default parameters for the version-controlled project."""

        def check_kwargs_for(keyword, default):
            if keyword in kwargs:
                if kwargs[keyword]:
                    return kwargs[keyword]
            return default

        self.vc_system = check_kwargs_for('vc_system', 'git')
        if self.vc_system == 'git':
            self.dotFolder = '.git'
        elif self.vc_system == 'svn':
            self.dotFolder = '.svn'
        else:
            sys.exit("VC_Project.__init__(): " +
                     "Unknown Version control system.")
        
        path = check_kwargs_for('path', '')
        dotFolder_path = check_kwargs_for('dotFolder_path', "")
        self.set_folders(path, dotFolder_path)
        self.user_name = check_kwargs_for('user_name', '')
        self.server_address = check_kwargs_for('server_address', '')
        self.project_name = check_kwargs_for('project_name',
                                             os.path.basename(self.path))
        self.identifier = self.project_name + '-' + self.vc_system
        if self.user_name:
            self.identifier = self.user_name + '-' + self.identifier

        self.gitrepo_https = ''
        self.gitrepo_git = ''
        gitrepo = check_kwargs_for('gitrepo', "")
        if gitrepo:
            self.use_gitrepo = True
        else:
            self.use_gitrepo = False
        if (self.vc_system == 'git' and self.use_gitrepo):
            gitrepo_https = "https://{}/{}/{}"
            gitrepo_git = 'git@{}:{}/{}.git'
            self.gitrepo_https = gitrepo_https.format(gitrepo,
                                                      self.user_name,
                                                      self.project_name)
            self.gitrepo_git = gitrepo_git.format(gitrepo,
                                                  self.user_name,
                                                  self.project_name)
        self.alt_paths = check_kwargs_for('alt_paths', [])

    def set_folders(self, path, dotFolder_path=""):
        """Set self.path and dotFolder_path."""
        self.path = path
        if not dotFolder_path:
            self.dotFolder_path = os.path.join(path, self.dotFolder)
        else:
            self.dotFolder_path = dotFolder_path

    def project_from_data(self, identifier):
        """Get project data from data file."""
        projects_data = self.read_project_data()
        if identifier in projects_data:
            # print("Reading {} project data".format(identifier))
            return projects_data[identifier]
        else:
            error_msg = "No project named {} in {}.".format(identifier,
                                                            VCM_PROJECTS)
            sys.exit("VC_Project.project_from_data(): {}".format(error_msg))

    def move_dotFolder(self, vcs_dot_path):
        """Move and link local dot-folder (.git, .svn) to the vcs_dot_path."""
        dotFolder_path = os.path.join(self.path, self.dotFolder)

        # Check if the dot-folder is already a symbolic link
        if os.path.islink(dotFolder_path):
            sys.exit("VC_Project.move_VC_dotfolder(): " +
                     "The dot-folder is a sym-link already.")
        else:
            counter = len(os.listdir(dotFolder_path))
            for entry in os.listdir(dotFolder_path):
                if os.path.islink(os.path.join(dotFolder_path, entry)):
                    counter -= 1
            if counter <= 0:
                sys.exit("VC_Project.move_VC_dotfolder(): " +
                         "The dot-folder is sym-linked already.")

        # Check if there is no other folder with the same name in the vcm_path
        new_dotFolder_path = os.path.join(vcs_dot_path, self.identifier)
        if os.path.exists(new_dotFolder_path):
            error_msg = "The path {} already exists."
            sys.exit("VC_Project.move_VC_dotfolder(): {}".format(error_msg))

        # Move the dot-folder
        shutil.move(dotFolder_path, new_dotFolder_path)
        if self.dotFolder in os.listdir(self.path):
            error_msg = "Moving unsuccessful, {} still exists.".format(
                dotFolder_path)
            sys.exit("VC_Project.move_VC_dotfolder(): {}".format(error_msg))

        # Create symlink (different for git and svn)
        if self.vc_system == "git":
            os.symlink(new_dotFolder_path, dotFolder_path)
            print("Created symlink between \n\t{} and \n\t{}".format(
                  new_dotFolder_path, dotFolder_path))
        elif self.vc_system == "svn":
            os.mkdir(dotFolder_path)
            for entry in os.listdir(new_dotFolder_path):
                os.symlink(os.path.join(new_dotFolder_path, entry),
                           os.path.join(dotFolder_path, entry))
            print("Created symlinks between \n\t{}/* and \n\t{}/*".format(
                new_dotFolder_path, dotFolder_path))

        # Updating variables
        self.dotFolder_path = new_dotFolder_path
        self.write_project_data(update=True)

    def move_Folder(self, new_path):
        """Move itself to new_path/user-Projectname."""
        if self.user_name:
            folder_name = "{}-{}".format(self.user_name, self.project_name)
        else:
            folder_name = self.project_name
        
        newfullpath = os.path.join(new_path, folder_name)
        if os.path.exists(newfullpath):
            sys.exit("{} already exists in {}.".format(folder_name, 
                                                       new_path))
        else:
            os.makedirs(newfullpath)
        # move
        for element in os.listdir(self.path):
            shutil.move(os.path.join(self.path, element), newfullpath)
        os.rmdir(self.path)
        if not self.path in self.alt_paths:
            self.alt_paths.append(self.path)
        self.set_folders(newfullpath)
        self.write_project_data(update=True)

    def read_project_data(self):
        """
        Read the already existing yaml data file.

        This contains all version-controlled projects and saves them to a
         dictionary.
        """
        # We first need to check if the projects.yaml exists
        if not os.path.exists(VCM_PROJECTS):
            return {}
        # Slurping in the yaml
        with open(VCM_PROJECTS) as projects:
            project_data = yaml.load(projects)
        return project_data

    def write_project_data(self, update=False):
        """Write the the project details to a data file in the vcm_path."""
        project_data = self.read_project_data()
        if (self.identifier in project_data and not update):
            print("The {} project is already in the "
                  "local database.".format(self.project_name))
        else:
            data_set = {"project_name": self.project_name,
                        "path": self.path,
                        "vc_system": self.vc_system,
                        "dotFolder_path": self.dotFolder_path,
                        "user_name": self.user_name,
                        "gitrepo_https": self.gitrepo_https,
                        "gitrepo_git": self.gitrepo_git,
                        "use_gitrepo": self.use_gitrepo,
                        "server_address": self.server_address,
                        "alt_paths": self.alt_paths}
            # remove empty key-value pairs
            data_set = {k: v for k, v in data_set.items() if v}
            project_data[self.identifier] = data_set
            print("Adding the {} project to the {} file.".format(
                self.identifier, VCM_PROJECTS))
            # Check if the vcm_path folder exists
            if not os.path.exists(CONFIG_PATH):
                os.mkdir(CONFIG_PATH)
            with open(VCM_PROJECTS, 'w') as projects_yaml:
                projects_yaml.write(yaml.dump(project_data,
                                              default_flow_style=False))

    def git_status(self):
        """
        Return the status of this git repository relative to the origin.

        Return values are: "Up-to-date", "Need to pull", "
                           Need to push", "Diverged" and "Not a github repo"
        """
        if (not self.vc_system == "git" and not self.use_gitrepo):
            return "Not online git repo"

        cwd = os.getcwd()
        os.chdir(self.path)

        query_process("git remote update")
        local = query_process("git rev-parse @")
        remote = query_process("git rev-parse @{u}")
        base = query_process("git merge-base @ @{u}")

        if local == remote:
            status = "Up-to-date"
        elif local == base:
            status = "Need to pull"
        elif remote == base:
            status = "Need to push"
        else:
            status = "Diverged"
        os.chdir(cwd)
        return status

    def remove_project_data(self):
        """Removes the entry for this project from the database."""
        project_data = self.read_project_data()
        if self.identifier in project_data:
            new_dotFolder_path = os.path.join(self.path, self.dotFolder)
            old_dotFolder_path = os.path.join(VCM_PATH, self.identifier)
            os.unlink(new_dotFolder_path)  # Delete Link
            shutil.move(old_dotFolder_path, new_dotFolder_path)  # Move
            del project_data[self.identifier]
            self.dotFolder_path = new_dotFolder_path  # Update .Folder location
        else:
            error_msg = "Cannot remove project {} ".format(self.identifier)
            error_msg += "(Project not found)."
            sys.exit("VC_Project.remove_project_data(): {}".format(error_msg))
        with open(VCM_PROJECTS, 'w') as projects_yaml:
                projects_yaml.write(yaml.dump(project_data,
                                              default_flow_style=False))

    def create_alt_links(self):
        """Create symlinks to the original folder."""
        for alt_path in self.alt_paths:
            if os.path.exists(alt_path):
                if not os.path.islink(alt_path):
                    print("{} exists, no symlink created.")
                    continue
                else:
                    os.remove(alt_path)
            print("Linking {} to {}.".format(self.path, alt_path))
            os.symlink(self.path, alt_path)

    def create_backup(self):
        pass



if __name__ == '__main__':
    config = read_config()
    vcs_path = config["vcs_path"]
    vcs_dot_path = config["vcs_dot_path"]
    # Determine the path
    if not args.path:
        path = os.getcwd()
    else:
        path = os.path.abspath(args.path)

    # Initialise Project
    if args.identifier:
        project = VC_Project(identifier=args.identifier)
    elif ('.git' in os.listdir(path) or '.svn' in os.listdir(path)):
        project = VC_Project(path=path,
                             vc_system=args.vc_system,
                             project_name=args.project_name,
                             user_name=args.user_name,
                             gitrepo=args.gitrepo,
                             server_address=args.server_address,
                             alt_paths=args.alt_paths)
        if args.check:
            project = VC_Project(identifier=project.identifier)
    else:
        sys.exit("Unable to find a git/svn project.")

    # Are we deleting?
    if args.delete:
        project.remove_project_data()
        sys.exit('Project {} removed from DB.'.format(project.identifier))

    # Are we checking the repo?
    if args.check:
        msg = "Project {} status: {}".format(project.identifier,
                                             project.git_status())
        print(msg)
        sys.exit()

    # Default: Add project to the database
    project.write_project_data(update=False)
    if args.move_dot:
        project.move_dotFolder(vcs_dot_path)
    if args.move:
        project.move_Folder(vcs_path)
        project.create_alt_links()




#!/usr/bin/env python
import os
import shutil
import sys
import yaml
import argparse


program_description = """
This is a management program for svn or git version-controlled projects.
"""

GITHUB_USER = 'jdcapa'
HOME = os.path.expanduser("~")
VCM_PATH = os.path.join(HOME, ".VersionControl")
PROJECT_DATA_FN = os.path.join(VCM_PATH, 'projects.yaml')
GITHUB_https = "https://github.com/{}/{}"
GITHUB_git = 'git@github.com:{}/{}.git'


# parser set-up
parser = argparse.ArgumentParser(description=program_description)

# parser.add_argument('action',
#                     metavar='vcm action',
#                     type=str, default="innit",
#                     help='Action you want performed [init|move]')

parser.add_argument('-m', "--move",
                    action="store_true",
                    default='',
                    dest="move",
                    help=('Moves the dotFolder (.svn or .git to {} and ' +
                          'creates a symlink in its stead.').format(VCM_PATH))

parser.add_argument('-g', "--git-hub",
                    action="store_true",
                    default=False,
                    dest="use_github",
                    help='Is this on github?')

parser.add_argument('-p', "--project",
                    action='store',
                    type=str, default="",
                    dest="project_name",
                    help='Custom project name [default: root folder name]')

parser.add_argument('-vc', "--version-control",
                    action='store',
                    type=str, default="git",
                    dest='vc_system',
                    help='Version Control system [default: git]')

parser.add_argument('-pa', "--path",
                    action='store',
                    type=str, default="",
                    dest='path',
                    help='Directory path [default: current directory]')

parser.add_argument('-sa', "--server-address",
                    action='store',
                    type=str, default="",
                    dest="server_address",
                    help='Git or Svn server address')

parser.add_argument('-u', "--user-name",
                    action='store',
                    type=str, default="",
                    dest="user_name",
                    help='User name for the git or svn server')

parser.add_argument('-i', "--identifier",
                    action='store',
                    type=str, default="",
                    dest="identifier",
                    help='Internal database identifier, e.g. projectname-git')

args = parser.parse_args()


class VC_Project(object):
    """Contains details and methods for a version-controlled project."""

    def __init__(self, **kwargs):
        """Initiate the project only with kewords."""
        super(VC_Project, self).__init__()
        if (len(kwargs) == 1 and 'identifier' in kwargs):
            self.project_details_from_data(kwargs['identifier'])
        else:
            self.set_defaults(kwargs)

    def set_defaults(self, kwargs):
        """Set default parameters for the version-controlled project."""
        def check_kwargs_for(keyword, default):
            if keyword in kwargs:
                if kwargs[keyword]:
                    return kwargs[keyword]
            return default

        self.path = check_kwargs_for('path', '')
        self.vc_system = check_kwargs_for('vc_system', 'git')
        if self.vc_system == 'git':
            self.dotFolder = '.git'
        elif self.vc_system == 'svn':
            self.dotFolder = '.svn'
        else:
            sys.exit("VC_Project.__init__(): " +
                     "Unknown Version control system.")
        self.dotFolder_path = check_kwargs_for('dotFolder_path',
                                               os.path.join(self.path,
                                                            self.dotFolder))
        self.user_name = check_kwargs_for('user_name', '')
        self.server_address = check_kwargs_for('server_address', '')
        self.project_name = check_kwargs_for('project_name',
                                             os.path.basename(self.path))
        self.identifier = self.project_name + '-' + self.vc_system
        self.github_https = ''
        self.github_git = ''
        self.use_github = check_kwargs_for('use_github', False)
        if (self.vc_system == 'git' and self.use_github):
            self.github_https = GITHUB_https.format(self.user_name,
                                                    self.project_name)
            self.github_git = GITHUB_git.format(self.user_name,
                                                self.project_name)

    def project_from_data(self, identifier):
        """Get project data from data file."""
        projects_data = self.read_project_data()
        if identifier in projects_data:
            print ("Reading {} project data".format(self.identifier))
            return projects_data[identifier]
        else:
            error_msg = "No project named {} in {}.".format(identifier,
                                                            PROJECT_DATA_FN)
            sys.exit("VC_Project.project_from_data(): {}".format(error_msg))

    def move_VC_dotFolder(self):
        """Move and link local dot-folder (.git, .svn) to the VCM_PATH."""
        dotFolder_path = os.path.join(self.path, self.dotFolder)

        # Check if the dot-folder is already a symbolic link
        if os.path.islink(dotFolder_path):
            sys.exit("VC_Project.move_VC_dotfolder(): " +
                     "The dot-folder is a sym-link already.")
        else:
            counter = len(os.listdir(dotFolder_path))
            for entry in os.listdir(dotFolder_path):
                if os.path.islink(os.path.join(dotFolder_path, entry)):
                    counter -= 1
            if counter <= 0:
                sys.exit("VC_Project.move_VC_dotfolder(): " +
                         "The dot-folder is sym-linked already.")

        # Check if there is no other folder with the same name in the vcm_path
        new_dotFolder_path = os.path.join(VCM_PATH, self.identifier)
        if os.path.exists(new_dotFolder_path):
            error_msg = "The path {} already exists."
            sys.exit("VC_Project.move_VC_dotfolder(): {}".format(error_msg))

        # Move the dot-folder
        shutil.move(dotFolder_path, new_dotFolder_path)
        if self.dotFolder in os.listdir(self.path):
            error_msg = "Moving unsuccessful, {} still exists.".format(
                dotFolder_path)
            sys.exit("VC_Project.movXe_VC_dotfolder(): {}".format(error_msg))

        # Create symlink (different for git and svn)
        if self.vc_system == "git":
            os.symlink(new_dotFolder_path, dotFolder_path)
            print("Created symlink between \n\t{} and \n\t{}".format(
                    new_dotFolder_path, dotFolder_path))
        elif self.vc_system == "svn":
            os.mkdir(dotFolder_path)
            for entry in os.listdir(new_dotFolder_path):
                os.symlink(os.path.join(new_dotFolder_path, entry),
                           os.path.join(dotFolder_path, entry))
            print("Created symlinks between \n\t{}/* and \n\t{}/*".format(
                    new_dotFolder_path, dotFolder_path))

        # Updating variables
        self.dotFolder_path = new_dotFolder_path
        self.write_project_data(update=True)

    def read_project_data(self):
        """
        Read the already existing yaml data file.

        This contains all version-controlled projects and saves them to a
         dictionary.
        """
        # We first need to check if the projects.yaml exists
        if not os.path.exists(PROJECT_DATA_FN):
            return {}
        # Slurping in the yaml
        with open(PROJECT_DATA_FN) as projects:
            project_data = yaml.load(projects)
        return project_data

    def write_project_data(self, update=False):
        """Write the the project details to a data file in the vcm_path."""
        project_data = self.read_project_data()
        if (self.identifier in project_data and not update):
            print ("The {} project is already in the "
                   "local database.".format(self.project_name))
        else:
            data_set = {"project_name": self.project_name,
                        "path": self.path,
                        "vc_system": self.vc_system,
                        "dotFolder_path": self.dotFolder_path,
                        "user_name": self.user_name,
                        "github_https": self.github_https,
                        "github_git": self.github_git,
                        "use_github": self.use_github,
                        "server_address": self.server_address}
            # remove empty key-value pairs
            data_set = {k: v for k, v in data_set.items() if v}
            project_data[self.identifier] = data_set
            print("Adding the {} project to the {} file.".format(
                    self.identifier, PROJECT_DATA_FN))
            # Check if the vcm_path folder exists
            if not os.path.exists(VCM_PATH):
                os.mkdir(VCM_PATH)
            with open(PROJECT_DATA_FN, 'w') as projects_yaml:
                projects_yaml.write(yaml.dump(project_data,
                                              default_flow_style=False))


if __name__ == '__main__':
    if not args.path:
        path = os.getcwd()
    else:
        path = args.path

    if args.identifier:
        project = VC_Project(identifier=args.identifier)
    elif ('.git' in os.listdir(path) or '.svn' in os.listdir(path)):
        project = VC_Project(path=path,
                             vc_system=args.vc_system,
                             project_name=args.project_name,
                             user_name=args.user_name,
                             use_github=args.use_github,
                             server_address=args.server_address)
    # Actions
    project.write_project_data(update=False)
    if args.move:
        project.move_VC_dotFolder()
